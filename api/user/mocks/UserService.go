// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	form "github.com/alizoubair/go-grpc-server/api/api_struct/form"
	mock "github.com/stretchr/testify/mock"

	model "github.com/alizoubair/go-grpc-server/api/api_struct/model"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, req
func (_m *UserService) CreateUser(ctx context.Context, req *form.UserForm) (*model.UserModel, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *form.UserForm) (*model.UserModel, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *form.UserForm) *model.UserModel); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *form.UserForm) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *UserService) DeleteUser(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: ctx, id, selectField
func (_m *UserService) GetUser(ctx context.Context, id string, selectField string) (*model.UserModel, error) {
	ret := _m.Called(ctx, id, selectField)

	var r0 *model.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.UserModel, error)); ok {
		return rf(ctx, id, selectField)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.UserModel); ok {
		r0 = rf(ctx, id, selectField)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, selectField)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx, filter, filterCount, where, orderBy, selectField
func (_m *UserService) GetUsers(ctx context.Context, filter map[string]interface{}, filterCount map[string]interface{}, where string, orderBy string, selectField string) ([]*model.UserModel, int, error) {
	ret := _m.Called(ctx, filter, filterCount, where, orderBy, selectField)

	var r0 []*model.UserModel
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, map[string]interface{}, string, string, string) ([]*model.UserModel, int, error)); ok {
		return rf(ctx, filter, filterCount, where, orderBy, selectField)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, map[string]interface{}, string, string, string) []*model.UserModel); ok {
		r0 = rf(ctx, filter, filterCount, where, orderBy, selectField)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}, map[string]interface{}, string, string, string) int); ok {
		r1 = rf(ctx, filter, filterCount, where, orderBy, selectField)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, map[string]interface{}, map[string]interface{}, string, string, string) error); ok {
		r2 = rf(ctx, filter, filterCount, where, orderBy, selectField)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateUser provides a mock function with given fields: ctx, req, id
func (_m *UserService) UpdateUser(ctx context.Context, req *form.UserForm, id string) (*model.UserModel, error) {
	ret := _m.Called(ctx, req, id)

	var r0 *model.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *form.UserForm, string) (*model.UserModel, error)); ok {
		return rf(ctx, req, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *form.UserForm, string) *model.UserModel); ok {
		r0 = rf(ctx, req, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *form.UserForm, string) error); ok {
		r1 = rf(ctx, req, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
